* The Dependently-Typed SK(M) Calculus

In this repository, I define a dependent typing for the SK combinators by adding a "reflection" combinator (the "M" combinator).

See the [[https://lexzaiello.com/sk-lean][book]] for more.

** Quick Start

To jump right in, check out the =skm= command-line tool in =./cli=. This tool allows compilation of lambda calculus to SKM, evaluation of SKM, evlauation of compiled lambda calculus, and generation of beta-equivalence proofs.

To enter into an interactive shell, use:

#+BEGIN_SRC bash
nix run .#skm repl
#+END_SRC

Optionally use the =--lc= flag to enable precompilation from lambda calculus to SKM.

Other commands include:

- =prove=: generates a proof of beta reduction of a given expression
- =eval=: evaluates a source file
  - Enable =--lc= for lambda calculus precompilation
- =compile=: generates an SK expression from the given lambda calculus program
  - Enable =--dry= to compile SK expressions inline instead of producing a monolithic expression

** Table of contents
- *Background* - general information about the lambda calculus and SK required for understanding this paper.
- *Dependent Typing in SK* - how dependent typing is achieved, including a possible translation algorithm from a dependently-typed lambda calculus to SK(M).

** Example

Dependent Church nuemrals can be encoded in *SKM* using a simple translation algorithm from the untyped lambda calculus. Types are inferred. See the =LcSkmEtaUntyped.lean= file for more:

#+BEGIN_SRC lean
def mk_church (n : ℕ) : LExpr :=
  let rec mk_church_body (n : ℕ) : LExpr :=
    if n = 0 then
      (.var 0)
    else
      (.call (.var 1) (mk_church_body n.pred))

  (.lam (.lam $ mk_church_body n))

def n_0 := mk_church 0
  |> lift
  |> to_sk_unsafe

def n_1 :=  mk_church 1
  |> lift
  |> to_sk_unsafe

def succ := (.lam (.lam (.lam (.call (.var 1) (.call (.call (.var 2) (.var 2)) (.var 0))))))
  |> lift
  |> to_sk_unsafe

#eval (eval_n 40 SKM[(M n_1)]) == (eval_n 40 SKM[(M n_1)])
-- => true
#+END_SRC
