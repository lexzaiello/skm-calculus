* The Dependently-Typed SK(M) Calculus

In this repository, I define a dependent typing for the SK combinators by adding a "reflection" combinator (the "M" combinator).

See the [[https://lexzaiello.com/sk-lean][book]] for more.

** Quick Start

To jump right in, check out the =skm= command-line tool in =./cli=. This tool allows compilation of lambda calculus to SKM, evaluation of SKM, evlauation of compiled lambda calculus, and generation of beta-equivalence proofs.

To enter into an interactive shell, use:

#+BEGIN_SRC bash
nix run .#skm repl -- --lc
#+END_SRC

Optionally use the =--lc= flag to enable precompilation from lambda calculus to SKM.

Other commands include:

- =prove=: generates a proof of beta reduction of a given expression
- =eval=: evaluates a source file
  - Enable =--lc= for lambda calculus precompilation
- =compile=: generates an SK expression from the given lambda calculus program
  - Enable =--dry= to compile SK expressions inline instead of producing a monolithic expression

** Table of contents
- *Background* - general information about the lambda calculus and SK required for understanding this paper.
- *Dependent Typing in SK* - how dependent typing is achieved, including a possible translation algorithm from a dependently-typed lambda calculus to SK(M).

** Example

Dependent Church nuemrals can be encoded in *SKM* using a simple translation algorithm from the untyped lambda calculus. Types are inferred. See the =LcSkmEtaUntyped.lean= file and =examples/church.skm= for more:

#+BEGIN_SRC lean
def zero := 位 f g => g
def succ := 位 n f x => (f (n f x))
def one  := (succ zero)

(M one)
#+END_SRC

#+BEGIN_SRC lean
def zero := 位 f g => g
def succ := 位 n f x => (f (n f x))
def one  := (succ zero)

(M (succ zero))
#+END_SRC

These two programs output the same expression.

Type of =M= (try this out):

#+BEGIN_SRC lean
>> (M M)
#+END_SRC

#+BEGIN_SRC lean
>> (M (M M))
#+END_SRC

